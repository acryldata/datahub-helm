apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "datahub-gms.fullname" . }}
  labels:
    {{- include "datahub-gms.labels" . | nindent 4 }}
    {{- range $key, $val := .Values.extraLabels }}
    {{ $key }}: {{ $val | quote }}
    {{- end }}
spec:
  {{- if and (.Values.global.strict_mode) (gt .Values.replicaCount 1.0) (.Values.global.datahub.managed_ingestion.enabled) (not .Values.global.datahub_standalone_consumers_enabled)}}
  {{- fail "\nManaged ingestion can not be used with multiple GMS instances in non standalone mode. Please enable standalone mode with only 1 MCE replica if you wish to run multiple GMS instances and managed ingestion." }}
  {{- else }}
  replicas:  {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "datahub-gms.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "datahub-gms.selectorLabels" . | nindent 8 }}
        {{- range $key, $value := .Values.global.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value := .Values.extraPodLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
    {{- with .Values.global.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "datahub-gms.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        {{- with .Values.global.credentialsAndCertsSecrets }}
        - name: datahub-certs-dir
          secret:
            defaultMode: 0444
            secretName: {{ .name }}
        {{- end }}
        {{- if .Values.global.elasticsearch.search.custom.enabled }}
        - configMap:
            name: {{ printf "%s-%s" .Release.Name "search-custom" }}
          name: search-config
        {{- end }}
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
      {{- with .Values.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ required "Global or specific tag is required" (.Values.image.tag | default .Values.global.datahub.version) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          {{- if or .Values.global.datahub.monitoring.enablePrometheus .Values.global.datahub.monitoring.enableJMXPort }}
            - name: jmx
              containerPort: 4318
              protocol: TCP
          {{- end }}
          {{- if gt .Values.replicaCount 1.0}}
            - name: hazelcast
              containerPort: 5701
              protocol: TCP
          {{- end}}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          env:
            {{- if .Values.global.elasticsearch.search.custom.enabled }}
            - name: ELASTICSEARCH_QUERY_CUSTOM_CONFIG_ENABLED
              value: "true"
            - name: ELASTICSEARCH_QUERY_CUSTOM_CONFIG_FILE
              value: "/datahub/datahub-gms/resources/search/search_config.yml"
            {{- end}}
            {{- if gt .Values.replicaCount 1.0}}
            - name: SEARCH_SERVICE_CACHE_IMPLEMENTATION
              value: "hazelcast"
            - name: SEARCH_SERVICE_HAZELCAST_SERVICE_NAME
              value: {{ printf "%s-%s" .Release.Name "hazelcast-service" }}
            {{- end}}
            {{- if .Values.global.datahub.systemUpdate.enabled }}
            - name: DATAHUB_UPGRADE_HISTORY_KAFKA_CONSUMER_GROUP_ID
              value: {{ printf "%s-%s" .Release.Name "duhe-consumer-job-client-gms" }}
            - name: DATAHUB_REVISION
              value: {{ .Release.Revision | quote }}
            {{- end }}
            {{- if .Values.global.datahub.monitoring.enablePrometheus }}
            - name: ENABLE_PROMETHEUS
              value: "true"
            {{- end }}
            {{- if not .Values.global.datahub_standalone_consumers_enabled }}
            - name: MCE_CONSUMER_ENABLED
              value: "true"
            - name: MAE_CONSUMER_ENABLED
              value: "true"
            - name: PE_CONSUMER_ENABLED
              value: "true"
            {{- end }}
            - name: ENTITY_REGISTRY_CONFIG_PATH
              value: /datahub/datahub-gms/resources/entity-registry.yml
            - name: DATAHUB_ANALYTICS_ENABLED
              value: "{{ .Values.global.datahub_analytics_enabled }}"
            - name: EBEAN_DATASOURCE_USERNAME
              {{- $usernameValue := (.Values.sql).datasource.username | default .Values.global.sql.datasource.username }}
              {{- if and (kindIs "string" $usernameValue) $usernameValue }}
              value: {{ $usernameValue | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: "{{ (.Values.sql).datasource.username.secretRef | default .Values.global.sql.datasource.username.secretRef }}"
                  key: "{{ (.Values.sql).datasource.username.secretKey | default .Values.global.sql.datasource.username.secretKey }}"
              {{- end }}
            - name: EBEAN_DATASOURCE_PASSWORD
              {{- $passwordValue := (.Values.sql).datasource.password.value | default .Values.global.sql.datasource.password.value }}
              {{- if $passwordValue }}
              value: {{ $passwordValue | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: "{{ (.Values.sql).datasource.password.secretRef | default .Values.global.sql.datasource.password.secretRef }}"
                  key: "{{ (.Values.sql).datasource.password.secretKey | default .Values.global.sql.datasource.password.secretKey }}"
              {{- end }}
            - name: EBEAN_DATASOURCE_HOST
              value: "{{ .Values.global.sql.datasource.host }}"
            - name: EBEAN_DATASOURCE_URL
              value: "{{ .Values.global.sql.datasource.url }}"
            - name: EBEAN_DATASOURCE_DRIVER
              value: "{{ .Values.global.sql.datasource.driver }}"
            - name: KAFKA_BOOTSTRAP_SERVER
              value: "{{ .Values.global.kafka.bootstrap.server }}"
            {{- if eq .Values.global.kafka.schemaregistry.type "INTERNAL" }}
            - name: KAFKA_SCHEMAREGISTRY_URL
              value: {{ printf "http://localhost:%s/schema-registry/api/" .Values.global.datahub.gms.port }}
            {{- else if eq .Values.global.kafka.schemaregistry.type "KAFKA" }}
            - name: KAFKA_SCHEMAREGISTRY_URL
              value: "{{ .Values.global.kafka.schemaregistry.url }}"
            {{- end }}
            {{- with .Values.global.kafka.schemaregistry.type }}
            - name: SCHEMA_REGISTRY_TYPE
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.global.kafka.schemaregistry.glue }}
            - name: AWS_GLUE_SCHEMA_REGISTRY_REGION
              value: "{{ .region }}"
            {{- with .registry }}
            - name: AWS_GLUE_SCHEMA_REGISTRY_NAME
              value: "{{ . }}"
            {{- end }}
            {{- end }}
            - name: ELASTICSEARCH_HOST
              value: "{{ .Values.global.elasticsearch.host }}"
            - name: ELASTICSEARCH_PORT
              value: "{{ .Values.global.elasticsearch.port }}"
            - name: SKIP_ELASTICSEARCH_CHECK
              value: "{{ .Values.global.elasticsearch.skipcheck }}"
            {{- with .Values.global.elasticsearch.useSSL }}
            - name: ELASTICSEARCH_USE_SSL
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.global.elasticsearch.auth }}
            - name: ELASTICSEARCH_USERNAME
              value: {{ .username }}
            - name: ELASTICSEARCH_PASSWORD
              {{- if .password.value }}
              value: {{ .password.value | quote }}
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: "{{ .password.secretRef }}"
                  key: "{{ .password.secretKey }}"
              {{- end }}
            {{- end }}
            {{- with .Values.global.elasticsearch.indexPrefix }}
            - name: INDEX_PREFIX
              value: {{ . }}
            {{- end }}
            - name: GRAPH_SERVICE_IMPL
              value: {{ .Values.global.graph_service_impl }}
            {{- if eq .Values.global.graph_service_impl "neo4j" }}
            - name: NEO4J_HOST
              value: "{{ .Values.global.neo4j.host }}"
            - name: NEO4J_URI
              value: "{{ .Values.global.neo4j.uri }}"
            - name: NEO4J_USERNAME
              value: "{{ .Values.global.neo4j.username }}"
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.global.neo4j.password.secretRef }}"
                  key: "{{ .Values.global.neo4j.password.secretKey }}"
            {{- end }}
            {{- if .Values.global.springKafkaConfigurationOverrides }}
            {{- range $configName, $configValue := .Values.global.springKafkaConfigurationOverrides }}
            - name: SPRING_KAFKA_PROPERTIES_{{ $configName | replace "." "_" | upper }}
              value: {{ $configValue | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.global.credentialsAndCertsSecrets }}
            {{- range $envVarName, $envVarValue := .Values.global.credentialsAndCertsSecrets.secureEnv }}
            - name: SPRING_KAFKA_PROPERTIES_{{ $envVarName | replace "." "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.global.credentialsAndCertsSecrets.name }}
                  key: {{ $envVarValue }}
            {{- end }}
            {{- end }}
            {{- with .Values.global.kafka.topics }}
            - name: METADATA_CHANGE_EVENT_NAME
              value: {{ .metadata_change_event_name }}
            - name: FAILED_METADATA_CHANGE_EVENT_NAME
              value: {{ .failed_metadata_change_event_name }}
            - name: METADATA_AUDIT_EVENT_NAME
              value: {{ .metadata_audit_event_name }}
            - name: DATAHUB_USAGE_EVENT_NAME
              value: {{ .datahub_usage_event_name }}
            - name: METADATA_CHANGE_PROPOSAL_TOPIC_NAME
              value: {{ .metadata_change_proposal_topic_name }}
            - name: FAILED_METADATA_CHANGE_PROPOSAL_TOPIC_NAME
              value: {{ .failed_metadata_change_proposal_topic_name }}
            - name: METADATA_CHANGE_LOG_VERSIONED_TOPIC_NAME
              value: {{ .metadata_change_log_versioned_topic_name }}
            - name: METADATA_CHANGE_LOG_TIMESERIES_TOPIC_NAME
              value: {{ .metadata_change_log_timeseries_topic_name }}
            - name: PLATFORM_EVENT_TOPIC_NAME
              value: {{ .platform_event_topic_name }}
            - name: DATAHUB_UPGRADE_HISTORY_TOPIC_NAME
              value: {{ .datahub_upgrade_history_topic_name }}
            {{- end }}
            {{- if .Values.global.datahub.metadata_service_authentication.enabled }}
            - name: METADATA_SERVICE_AUTH_ENABLED
              value: "true"
            - name: DATAHUB_TOKEN_SERVICE_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.datahub.metadata_service_authentication.tokenService.signingKey.secretRef }}
                  key: {{ .Values.global.datahub.metadata_service_authentication.tokenService.signingKey.secretKey }}
            - name: DATAHUB_TOKEN_SERVICE_SALT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.datahub.metadata_service_authentication.tokenService.salt.secretRef }}
                  key: {{ .Values.global.datahub.metadata_service_authentication.tokenService.salt.secretKey }}
            - name: DATAHUB_SYSTEM_CLIENT_ID
              value: {{ .Values.global.datahub.metadata_service_authentication.systemClientId }}
            - name: DATAHUB_SYSTEM_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.datahub.metadata_service_authentication.systemClientSecret.secretRef }}
                  key: {{ .Values.global.datahub.metadata_service_authentication.systemClientSecret.secretKey }}
            {{- end }}
            {{- if .Values.global.datahub.managed_ingestion.enabled }}
            - name: UI_INGESTION_ENABLED
              value: "true"
            - name: SECRET_SERVICE_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.global.datahub.encryptionKey.secretRef }}"
                  key: "{{ .Values.global.datahub.encryptionKey.secretKey }}"
            {{- else }}
            - name: UI_INGESTION_ENABLED
              value: "false"
            {{- end }}
            {{- if .Values.global.datahub.managed_ingestion.defaultCliVersion }}
            - name: UI_INGESTION_DEFAULT_CLI_VERSION
              value: "{{ .Values.global.datahub.managed_ingestion.defaultCliVersion }}"
            {{- end }}
            {{- if .Values.global.datahub.enable_retention }}
            - name: ENTITY_SERVICE_ENABLE_RETENTION
              value: "true"
            {{- end }}
            - name: ELASTICSEARCH_QUERY_MAX_TERM_BUCKET_SIZE
              value: {{ .Values.global.elasticsearch.search.maxTermBucketSize | quote }}
            - name: ELASTICSEARCH_QUERY_EXACT_MATCH_EXCLUSIVE
              value: {{ .Values.global.elasticsearch.search.exactMatch.exclusive | quote }}
            - name: ELASTICSEARCH_QUERY_EXACT_MATCH_WITH_PREFIX
              value: {{ .Values.global.elasticsearch.search.exactMatch.withPrefix | quote }}
            - name: ELASTICSEARCH_QUERY_EXACT_MATCH_FACTOR
              value: {{ .Values.global.elasticsearch.search.exactMatch.exactFactor | quote }}
            - name: ELASTICSEARCH_QUERY_EXACT_MATCH_PREFIX_FACTOR
              value: {{ .Values.global.elasticsearch.search.exactMatch.prefixFactor | quote }}
            - name: ELASTICSEARCH_QUERY_EXACT_MATCH_CASE_FACTOR
              value: {{ .Values.global.elasticsearch.search.exactMatch.caseSensitivityFactor | quote }}
            - name: ELASTICSEARCH_QUERY_EXACT_MATCH_ENABLE_STRUCTURED
              value: {{ .Values.global.elasticsearch.search.exactMatch.enableStructured | quote }}
            - name: ELASTICSEARCH_SEARCH_GRAPH_TIMEOUT_SECONDS
              value: {{ .Values.global.elasticsearch.search.graph.timeoutSeconds | quote }}
            - name: ELASTICSEARCH_SEARCH_GRAPH_BATCH_SIZE
              value: {{ .Values.global.elasticsearch.search.graph.batchSize | quote }}
            - name: ELASTICSEARCH_SEARCH_GRAPH_MAX_RESULT
              value: {{ .Values.global.elasticsearch.search.graph.maxResult | quote }}
            - name: SEARCH_SERVICE_ENABLE_CACHE
              value: {{ .Values.global.datahub.cache.search.enabled | quote }}
            {{- if .Values.global.datahub.cache.search.enabled }}
            - name: CACHE_TTL_SECONDS
              value: {{ .Values.global.datahub.cache.search.primary.ttlSeconds | quote }}
            - name: CACHE_MAX_SIZE
              value: {{ .Values.global.datahub.cache.search.primary.maxSize | quote }}
            - name: CACHE_ENTITY_COUNTS_TTL_SECONDS
              value: {{ .Values.global.datahub.cache.search.homepage.entityCounts.ttlSeconds | quote }}
            {{- end }}
            - name: LINEAGE_SEARCH_CACHE_ENABLED
              value: {{ .Values.global.datahub.cache.search.lineage.enabled | quote }}
            {{- if .Values.global.datahub.cache.search.lineage.enabled }}
            - name: CACHE_SEARCH_LINEAGE_TTL_SECONDS
              value: {{ .Values.global.datahub.cache.search.lineage.ttlSeconds | quote }}
            - name: CACHE_SEARCH_LINEAGE_LIGHTNING_THRESHOLD
              value: {{ .Values.global.datahub.cache.search.lineage.lightningThreshold | quote }}
            {{- end }}
            {{- with .Values.global.elasticsearch.index.enableMappingsReindex }}
            - name: ELASTICSEARCH_INDEX_BUILDER_MAPPINGS_REINDEX
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.global.elasticsearch.index.enableSettingsReindex }}
            - name: ELASTICSEARCH_INDEX_BUILDER_SETTINGS_REINDEX
              value: {{ . | quote }}
            {{- end }}
            - name: ALWAYS_EMIT_CHANGE_LOG
              value: {{ .Values.global.datahub.alwaysEmitChangeLog | quote }}
            - name: GRAPH_SERVICE_DIFF_MODE_ENABLED
              value: {{ .Values.global.datahub.enableGraphDiffMode | quote }}
          {{- with .Values.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- with .Values.global.credentialsAndCertsSecrets }}
            - name: datahub-certs-dir
              mountPath: {{ .path | default "/mnt/certs" }}
          {{- end }}
          {{- if .Values.global.elasticsearch.search.custom.enabled }}
            - name: search-config
              mountPath: "/datahub/datahub-gms/resources/search"
          {{- end }}
          {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- with .Values.extraSidecars }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
