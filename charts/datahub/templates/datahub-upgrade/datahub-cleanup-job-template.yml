{{- if .Values.datahubUpgrade.enabled -}}
# Job template for running datahub cleanup
# Creates a suspended cronJob that you can use to create an adhoc job when ready to run clean up.
# Run the following command to do so
# kubectl create job --from=cronjob/<<release-name>>-datahub-cleanup-job-template datahub-cleanup-job
apiVersion: {{ include "datahub.cronjob.apiVersion" $}}
kind: CronJob
metadata:
  name: {{ .Release.Name }}-datahub-cleanup-job-template
  labels:
    {{- include "datahub.labels" . | nindent 4 }}
spec:
  schedule: "* * * * *"
  suspend: true
  jobTemplate:
    spec:
      template:
        {{- if or .Values.global.podLabels .Values.datahubUpgrade.podAnnotations }}
        metadata:
        {{- with .Values.datahubUpgrade.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with .Values.global.podLabels }}
          labels:
            {{- range $key, $value := . }}
            {{ $key }}: {{ $value | quote }}
            {{- end }}
        {{- end }}
        {{- end }}
        spec:
        {{- with .Values.global.hostAliases }}
          hostAliases:
            {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with .Values.datahubUpgrade.serviceAccount }}
          serviceAccountName: {{ . }}
        {{- end }}
        {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
        {{- end }}
          volumes:
          {{- with .Values.datahubUpgrade.extraVolumes }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          restartPolicy: Never
          securityContext:
            {{- toYaml .Values.datahubUpgrade.podSecurityContext | nindent 12 }}
          initContainers:
          {{- with .Values.datahubUpgrade.extraInitContainers }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          containers:
            - name: datahub-upgrade-job
              image: "{{ .Values.datahubUpgrade.image.repository }}:{{ required "Global or specific tag is required" (.Values.datahubUpgrade.image.tag | default .Values.global.datahub.version) }}"
              imagePullPolicy: {{ .Values.datahubUpgrade.image.pullPolicy | default "IfNotPresent" }}
              args: [ "-u", "NoCodeDataMigrationCleanup" ]
              env:
                {{- include "datahub.upgrade.env" . | nindent 16}}
              {{- with .Values.datahubUpgrade.extraEnvs }}
                {{- toYaml . | nindent 16 }}
              {{- end }}
              securityContext:
                {{- toYaml .Values.datahubUpgrade.securityContext | nindent 16 }}
              volumeMounts:
              {{- with .Values.datahubUpgrade.extraVolumeMounts }}
                {{- toYaml . | nindent 16 }}
              {{- end }}
              resources:
                {{- toYaml .Values.datahubUpgrade.cleanupJob.resources | nindent 12 }}
            {{- with .Values.datahubUpgrade.cleanupJob.extraSidecars }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.datahubUpgrade.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.datahubUpgrade.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.datahubUpgrade.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
{{- end -}}
