{{- if .Values.datahubUpgrade.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-datahub-upgrade-job
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    spec:
    {{- with .Values.global.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.datahubUpgrade.serviceAccount }}
      serviceAccountName: {{ . }}
    {{- end }}
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        {{- with .Values.global.credentialsAndCertsSecrets }}
        - name: datahub-certs-dir
          secret:
            defaultMode: 0444
            secretName: {{ .name }}
        {{- end }}
      {{- with .Values.datahubUpgrade.extraVolumes }}
        {{- toYaml . | nindent 8}}
      {{- end }}
      restartPolicy: Never
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
      {{- with .Values.extraInitContainers }}
        {{- toYaml . | nindent 12 }}
      {{- end }}
      containers:
        - name: datahub-upgrade-job
          image: "{{ .Values.datahubUpgrade.image.repository }}:{{ .Values.datahubUpgrade.image.tag }}"
          imagePullPolicy: {{ .Values.datahubUpgrade.imagePullPolicy | default "Always" }}
          args:
            - "-u"
            - "NoCodeDataMigration"
            - "-a"
            - "batchSize=1000"
            - "-a"
            - "batchDelayMs=100"
            - "-a"
            - "dbType={{ .Values.datahubUpgrade.noCodeDataMigration.sqlDbType }}"
          env:
            - name: ENTITY_REGISTRY_CONFIG_PATH
              value: /datahub/datahub-gms/resources/entity-registry.yml
            - name: DATAHUB_GMS_HOST
              value: {{ printf "%s-%s" .Release.Name "datahub-gms" }}
            - name: DATAHUB_GMS_PORT
              value: "{{ .Values.global.datahub.gms.port }}"
            - name: DATAHUB_MAE_CONSUMER_HOST
              value: {{ printf "%s-%s" .Release.Name "datahub-mae-consumer" }}
            - name: DATAHUB_MAE_CONSUMER_PORT
              value: "{{ .Values.global.datahub.mae_consumer.port }}"
            - name: EBEAN_DATASOURCE_USERNAME
              value: "{{ .Values.global.sql.datasource.username }}"
            - name: EBEAN_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.global.sql.datasource.password.secretRef }}"
                  key: "{{ .Values.global.sql.datasource.password.secretKey }}"
            - name: EBEAN_DATASOURCE_HOST
              value: "{{ .Values.global.sql.datasource.host }}"
            - name: EBEAN_DATASOURCE_URL
              value: "{{ .Values.global.sql.datasource.url }}"
            - name: EBEAN_DATASOURCE_DRIVER
              value: "{{ .Values.global.sql.datasource.driver }}"
            - name: KAFKA_BOOTSTRAP_SERVER
              value: "{{ .Values.global.kafka.bootstrap.server }}"
            - name: KAFKA_SCHEMAREGISTRY_URL
              value: "{{ .Values.global.kafka.schemaregistry.url }}"
            - name: ELASTICSEARCH_HOST
              value: {{ .Values.global.elasticsearch.host | quote }}
            - name: ELASTICSEARCH_PORT
              value: {{ .Values.global.elasticsearch.port | quote }}
            {{- with .Values.global.elasticsearch.useSSL }}
            - name: ELASTICSEARCH_USE_SSL
              value: {{ . | quote }}
            {{- end }}
            {{- with .Values.global.elasticsearch.auth }}
            - name: ELASTICSEARCH_USERNAME
              value: {{ .username }}
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .password.secretRef }}"
                  key: "{{ .password.secretKey }}"
            {{- end }}
            {{- with .Values.global.elasticsearch.indexPrefix }}
            - name: INDEX_PREFIX
              value: {{ . }}
            {{- end }}
            - name: GRAPH_SERVICE_IMPL
              value: {{ .Values.global.graph_service_impl }}
            {{- if eq .Values.global.graph_service_impl "neo4j" }}
            - name: NEO4J_HOST
              value: "{{ .Values.global.neo4j.host }}"
            - name: NEO4J_URI
              value: "{{ .Values.global.neo4j.uri }}"
            - name: NEO4J_USERNAME
              value: "{{ .Values.global.neo4j.username }}"
            - name: NEO4J_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.global.neo4j.password.secretRef }}"
                  key: "{{ .Values.global.neo4j.password.secretKey }}"
            {{- end }}
            {{- if .Values.global.springKafkaConfigurationOverrides }}
            {{- range $configName, $configValue := .Values.global.springKafkaConfigurationOverrides }}
            - name: SPRING_KAFKA_PROPERTIES_{{ $configName | replace "." "_" | upper }}
              value: {{ $configValue }}
            {{- end }}
            {{- end }}
            {{- if .Values.global.credentialsAndCertsSecrets }}
            {{- range $envVarName, $envVarValue := .Values.global.credentialsAndCertsSecrets.secureEnv }}
            - name: SPRING_KAFKA_PROPERTIES_{{ $envVarName | replace "." "_" | upper }}
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.global.credentialsAndCertsSecrets.name }}
                  key: {{ $envVarValue }}
            {{- end }}
            {{- end }}
          {{- with .Values.datahubUpgrade.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- with .Values.global.credentialsAndCertsSecrets }}
            - name: datahub-certs-dir
              mountPath: {{ .path | default "/mnt/certs" }}
          {{- end }}
          {{- with .Values.datahubUpgrade.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 300m
              memory: 256Mi
      {{- with .Values.datahubUpgrade.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      {{- with .Values.datahubUpgrade.affinity }}
      affinity:
        {{- toYaml . | nindent 12 }}
      {{- end }}
      {{- with .Values.datahubUpgrade.tolerations }}
      tolerations:
        {{- toYaml . | nindent 12 }}
      {{- end }}
{{- end -}}